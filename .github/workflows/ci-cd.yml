name: CI Terraform Workflow

on:
  push:
    branches: [main, develop]
  pull_request: 
    branches: [develop, main]

jobs:
  setup:
    runs-on: ubuntu-latest
    name: set environments
    outputs:
      config: ${{ steps.setup.outputs.config }}
    steps:
      - name: Get branch name
        id: get-branch-name
        uses: EthanSK/git-branch-name-action@v1
      - name: set up
        id: setup
        run: |
          if [[ $GIT_BRANCH_NAME == 'main' || $GITHUB_BASE_REF == 'main' ]]
          then
            echo "::set-output name=config::config.pro.tfvars"
          else
            echo "::set-output name=config::config.dev.tfvars"
          fi

  fmt-validate:
    name: Format And validate
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: test Environment vars
        run: |
          echo  "${{needs.setup.outputs.config}}"
      - name: Check out code
        uses: actions/checkout@v2


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@625cb76050397c6b3a1789261eb129f8f39a206b
        with:
          terraform_version: ${{ inputs.version }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Run terraform fmt check
        run: |
          terraform init -backend-config="${{needs.setup.outputs.config}}" -migrate-state
          terraform fmt -check -diff
          terraform validate
  scan-security:
    name: tfsec sarif report
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Clone repo
        uses: actions/checkout@master
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@625cb76050397c6b3a1789261eb129f8f39a206b
        with:
          terraform_version: ${{ inputs.version }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform init
        run: terraform init -backend-config="${{needs.setup.outputs.config}}"
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          format: sarif
          soft_fail: true
          additional_args: --out result.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: result.sarif

      - name: Comments On Pull Request
        uses: tfsec/tfsec-pr-commenter-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [ fmt-validate, scan-security, setup]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@625cb76050397c6b3a1789261eb129f8f39a206b
        with:
          terraform_version: ${{ inputs.version }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="${{needs.setup.outputs.config}}"

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
 
  terraform-test:
    name: Terraform Test
    runs-on: ubuntu-latest
    needs: [terraform-plan, setup]
    steps:
      - run: echo "Pruebas unitarias sobre el codigo"

  terraform-apply:
    name: Terraform apply
    runs-on: ubuntu-latest
    needs: [ terraform-test, setup ]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@625cb76050397c6b3a1789261eb129f8f39a206b
        with:
          terraform_version: ${{ inputs.version }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="${{needs.setup.outputs.config}}"

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
 
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ github.token }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')  && github.event_name == 'push'
        run: terraform apply -auto-approve  
